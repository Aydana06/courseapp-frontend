import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { CourseService } from '../../services/course.service';
import { AuthService } from '../../services/auth.service';
import { Course, CourseDetails } from '../../models/models';

@Component({
  selector: 'app-create-course',
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule],
  templateUrl: './create-course.component.html',
  styleUrls: ['./create-course.component.css']
})
export class CreateCourseComponent implements OnInit {
  courseForm: FormGroup;
  isSubmitting = false;
  errorMessage = '';

  constructor(
    private fb: FormBuilder,
    private courseService: CourseService,
    private authService: AuthService,
    public router: Router
  ) {
    this.courseForm = this.fb.group({
      title: ['', [Validators.required, Validators.minLength(3)]],
      description: ['', [Validators.required, Validators.minLength(10)]],
      price: [0, [Validators.required, Validators.min(0)]],
      duration: ['', [Validators.required]],
      image: ['assets/images/course-placeholder.jpg', [Validators.required]],
      // Course details
      level: ['', [Validators.required]],
      category: ['', [Validators.required]],
      rating: [0, [Validators.min(0), Validators.max(5)]],
      students: [0, [Validators.min(0)]],
      language: ['Монгол', [Validators.required]],
      tags: [''],
      requirements: [''],
      outcomes: [''],
      lessonsText: ['']
    });
  }

  ngOnInit() {
    // Хэрэглэгч instructor эсвэл admin эрхтэй эсэхийг шалгах
    const userRole = this.authService.role;
    if (!userRole || (userRole !== 'instructor' && userRole !== 'admin')) {
      this.router.navigate(['/dashboard']);
      return;
    }
  }

  onSubmit() {
    if (this.courseForm.valid && !this.isSubmitting) {
      this.isSubmitting = true;
      this.errorMessage = '';

      const formData = this.courseForm.value;
      
      // Form data-г Course model-т тохирох хэлбэрт шилжүүлэх
      const courseData: Partial<Course> = {
        title: formData.title,
        description: formData.description,
        price: formData.price,
        duration: formData.duration,
        image: formData.image,
        details: [{
          id: '', // Will be generated by backend
          level: formData.level,
          category: formData.category,
          rating: formData.rating,
          students: formData.students,
          language: formData.language,
          lastUpdated: new Date().toISOString().split('T')[0],
          tags: formData.tags ? formData.tags.split(',').map((tag: string) => tag.trim()) : [],
          lessons: (formData.lessonsText || '')
            .split('\n')
            .map((l: string) => l.trim())
            .filter((l: string) => !!l)
            .map((line: string) => {
              const [title, duration, type] = line.split('|').map((s: string) => s?.trim());
              return { title: title || 'Untitled', duration: duration || '', type: type || '' } as any;
            }),
          requirements: formData.requirements ? formData.requirements.split('\n').filter((req: string) => req.trim()) : [],
          outcomes: formData.outcomes ? formData.outcomes.split('\n').filter((outcome: string) => outcome.trim()) : []
        }]
      };

      this.courseService.createCourse(courseData).subscribe({
        next: (course) => {
          console.log('Course created successfully:', course);
          alert('Сургалт амжилттай үүсгэгдлээ!');
          this.router.navigate(['/courses']);
        },
        error: (error) => {
          console.error('Error creating course:', error);
          this.errorMessage = error.message || 'Сургалт үүсгэхэд алдаа гарлаа';
          this.isSubmitting = false;
        }
      });
    } else {
      this.markFormGroupTouched();
    }
  }

  private markFormGroupTouched() {
    Object.keys(this.courseForm.controls).forEach(key => {
      const control = this.courseForm.get(key);
      control?.markAsTouched();
    });
  }

  getFieldError(fieldName: string): string {
    const control = this.courseForm.get(fieldName);
    if (control?.errors && control.touched) {
      if (control.errors['required']) {
        return `${fieldName} заавал бөглөх ёстой`;
      }
      if (control.errors['minlength']) {
        return `${fieldName} хамгийн багадаа ${control.errors['minlength'].requiredLength} тэмдэгт байх ёстой`;
      }
      if (control.errors['min']) {
        return `${fieldName} хамгийн багадаа ${control.errors['min'].min} байх ёстой`;
      }
      if (control.errors['max']) {
        return `${fieldName} хамгийн ихдээ ${control.errors['max'].max} байх ёстой`;
      }
    }
    return '';
  }

  isFieldInvalid(fieldName: string): boolean {
    const control = this.courseForm.get(fieldName);
    return !!(control?.invalid && control.touched);
  }
}
